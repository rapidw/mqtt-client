plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id "me.champeau.gradle.jmh" version "0.5.0"
    id 'net.researchgate.release' version '2.8.1'
    id 'se.patrikerdes.use-latest-versions' version '0.2.13'
    id 'com.github.ben-manes.versions' version '0.28.0'
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.hierynomus.license" version "0.15.0"
//    id "com.star-zero.gradle.githook" version "1.2.0"
    id "com.jfrog.artifactory" version "4.14.1"
}

import org.gradle.api.publish.maven.internal.artifact.FileBasedMavenArtifact

group = 'io.rapidw.mqtt'
description = "Rapidw MQTT client"

def String getProp(String name) {
    if (hasProperty(name)) {
        return properties[name]
    } else {
        String env = System.getenv(name)
        if (env != null) {
            return env
        } else {
            return ""
        }
    }
}

ext {
    url = 'https://github.com/rapidw/mqtt-client'
    vcsUrl = "${url}.git"
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "http://oss.jfrog.org/artifactory/simple/libs-snapshot/"
        allowInsecureProtocol true
    }
}

sourceSets {
    intTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    intTestImplementation.extendsFrom implementation
    intTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    api 'io.rapidw.mqtt:rapidw-mqtt-codec:0.0.6'
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'io.netty:netty-handler:4.1.45.Final'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'org.mockito:mockito-core:3.3.0'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"

    intTestImplementation 'ch.qos.logback:logback-classic:1.2.3'
    intTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    intTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    intTestImplementation "commons-io:commons-io:2.6"
    intTestImplementation 'commons-codec:commons-codec:1.15'
    intTestCompileOnly 'org.projectlombok:lombok:1.18.12'
    intTestAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

license {
    header project.file("gradle/license-header")
}

tasks.withType(JavaCompile) {

    options.encoding = "UTF-8"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

javadoc {
    options {
        encoding = 'UTF-8'
        locale 'en_US'
        jFlags '-Duser.language=en_US'
    }

    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    shouldRunAfter test
}
java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "$group:${project.name}"
                description = project.description
                url = project.url

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'pvtyuan'
                        email = 'pvtyuan@foxmail.com'
                    }
                }

                scm {
                    connection = "scm:git:${project.vcsUrl}"
                    developerConnection = "scm:git:${project.vcsUrl}"
                    url = project.url
                }
            }
        }
    }
}

// include pom in jar
jar {
    into("META-INF/maven/$project.group/$project.name") {
        from generatePomFileForMavenJavaPublication
        rename ".*", "pom.xml"
    }
}

release {
    failOnUnversionedFiles = false
    pushReleaseVersionBranch = "master"
}

bintray {
    user = getProp("bintrayUser")
    key = getProp("bintrayKey")

    publish = true
    override = true

    pkg {
        repo = 'maven'
        name = project.name
        userOrg = "rapidw"
        licenses = ['Apache-2.0']
        vcsUrl = project.vcsUrl

        version {
            name = project.version

            gpg {
                sign = true
                passphrase = getProp("signing.password")
            }

            mavenCentralSync {
                sync = true
                user = getProp("nexusUsername")
                password = getProp("nexusPassword")
                close = '1'
            }
        }
    }

    publications = ["mavenJava"]
}

// workaround for upload gradle module metadata to bintray
project.tasks.withType(com.jfrog.bintray.gradle.tasks.BintrayUploadTask) {
    doFirst {
        publishing.publications.withType(MavenPublication).each { publication ->
            File moduleFile = project.buildDir.toPath()
                .resolve("publications/${publication.name}/module.json").toFile()

            if (moduleFile.exists()) {
                publication.artifact(new FileBasedMavenArtifact(moduleFile) {
                    @Override
                    protected String getDefaultExtension() {
                        return "module"
                    }
                })
            }
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = getProp("bintrayUser")
            password = getProp("bintrayKey")
        }
        defaults {
            publications 'mavenJava'
            publishBuildInfo = true
            publishArtifacts = true
            publishPom = true
            publishIvy = false
        }
    }
}

afterReleaseBuild.dependsOn bintrayUpload
