plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jvm-test-suite'
    id 'jacoco'
    id 'signing'
    id "net.researchgate.release" version "3.0.2"
    id "se.patrikerdes.use-latest-versions" version "0.2.13"
    id "com.github.ben-manes.versions" version "0.28.0"
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0-rc-1"
    id "io.freefair.lombok" version "8.1.0"
    id "com.github.hierynomus.license" version "0.16.1"
//    id "com.star-zero.gradle.githook" version "1.2.0"
}

group = "io.rapidw.mqtt"
description = "Rapidw MQTT client"

ext {
    projectUrl = 'https://github.com/rapidw/mqtt-client'
    vcsUrl = "${projectUrl}.git"
}

repositories {
    mavenCentral()
}

testing {
    suites {
        test {
            useSpock()
        }

        integrationTest(JvmTestSuite) {
            dependencies {
                implementation(project())
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named("check") {
    dependsOn(testing.suites.integrationTest)
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

dependencies {
    api "io.rapidw.mqtt:rapidw-mqtt-codec:0.0.13"
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "io.netty:netty-handler:4.1.45.Final"
    implementation "io.netty:netty-transport:4.1.45.Final"

    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
    testImplementation "org.spockframework:spock-spring:2.3-groovy-3.0"

    integrationTestImplementation "ch.qos.logback:logback-classic:1.2.3"
    integrationTestImplementation "commons-io:commons-io:2.6"
    integrationTestImplementation "commons-codec:commons-codec:1.15"
    integrationTestCompileOnly "org.projectlombok:lombok:1.18.12"
    integrationTestAnnotationProcessor "org.projectlombok:lombok:1.18.12"
    integrationTestImplementation "commons-codec:commons-codec:1.15"
}

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

license {
    header project.file("gradle/license-header")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    options {
        encoding = "UTF-8"
        locale("en_US")
        jFlags("-Duser.language=en_US")
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "$group:${project.name}"
                description = project.description
                url = projectUrl

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        name = "pvtyuan"
                        email = "yyz139@gmail.com"
                    }
                }

                scm {
                    connection = "scm:git:${vcsUrl}"
                    developerConnection = "scm:git:${vcsUrl}"
                    url = projectUrl
                }
            }
        }
    }
}

release {
    failOnUnversionedFiles = false
    pushReleaseVersionBranch = "master"
    git {
        requireBranch.set("master")
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing.repositories {
    sonatype {
        username = properties["mavenCentralUsername"]
        password = properties["mavenCentralPassword"]
    }
}

tasks.named("closeAndReleaseSonatypeStagingRepository") {
    dependsOn("publishToSonatype")
}
tasks.afterReleaseBuild {
    dependsOn("closeAndReleaseSonatypeStagingRepository")
}
